const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
const AWS = require('aws-sdk');
const fs = require('fs');
require('dotenv').config();

passport.serializeUser(function (user, cb) {
  cb(null, user);
});

passport.deserializeUser(function (obj, cb) {
  cb(null, obj);
});

app.use('/', require('./routes/index.js'));

app.get('/success', (req, res) => res.send(userProfile));
app.get('/error', (req, res) => res.send("error logging in"));

// Use environment variables for Google OAuth credentials
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID, // Loaded from .env
      clientSecret: process.env.GOOGLE_CLIENT_SECRET, // Loaded from .env
      callbackURL: "http://localhost:2700/auth/google/callback",
    },
    function (accessToken, refreshToken, profile, done) {
      userProfile = profile;
      return done(null, profile);
    }
  )
);

app.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

app.get(
  '/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/error' }),
  function (req, res) {
    res.json({ userProfile });
  }
);

// AWS S3 Configuration
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID, // Loaded from .env
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY, // Loaded from .env
});

const uploadImage = async (req, res) => {
  const path = 'images/' + Date.now() + '.png';
  const buf = Buffer.from(req.body.img.replace(/^data:image\/\w+;base64,/, ''), 'base64');

  const data = {
    Bucket: process.env.AWS_BUCKET_NAME, // Loaded from .env
    Key: path,
    Body: buf,
    ACL: 'private',
    ContentType: 'image/jpeg',
  };

  s3.upload(data, function (err, data1) {
    if (err) {
      console.log(err);
      console.log('Error uploading data1: ', data1);
    } else {
      console.log(data1);
    }
  });

  try {
    const localPath = './images/' + Date.now() + '.png';
    const imgdata = req.body.img;
    const base64Data = imgdata.replace(/^data:([A-Za-z-+/]+);base64,/, '');
    fs.writeFileSync(localPath, base64Data, { encoding: 'base64' });
  } catch (e) {
    res.json({ e });
  }
};